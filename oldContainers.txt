storeContent.js 
import React from "react"; 

const StoreContext = React.createContext(null);

export const Provider = ({store,children}) => {
  return <StoreContext.Provider value={store}>
    {children}
  </StoreContext.Provider>
} 

export default StoreContext;


index.js
let rerenderEntireTree = () => {
  ReactDOM.render(
    <BrowserRouter>
    <Provider store={store}>
        <App/>
    </Provider>
    </BrowserRouter>, document.getElementById('root'));
}


DiaglosContainer.js

import React from 'react';
import { updateNewMessageTextActionCreator, addMessageActionCreator } from '../../redux/dialogs-reducer';
import StoreContext from '../../storeContext';
import Dialogs from './Dialogs';

const DialogsContainer = (props) => {

  return (
    <StoreContext.Consumer>
      {
        (store) => {
          let state = store.getState().dialogsPage;

          let onSendMessageClick = () => {
            store.dispatch(addMessageActionCreator());
          }

          let onNewMessageChange = (body) => {
            store.dispatch(updateNewMessageTextActionCreator(body))
          }

          return(
            <Dialogs 
            dialogsPage={state} 
            addMessage={onSendMessageClick} 
            updateNewMessageBody={onNewMessageChange} />
          )
        }
      }
    </StoreContext.Consumer>
  );
};

export default DialogsContainer;

MyPostsContainer.js

import React from 'react';
import { addPostActionCreator, updateNewPostTextActionCreator } from '../../../redux/profile-reducer';
import StoreContext from '../../../storeContext';
import MyPosts from './MyPosts';


const MyPostsContainer = (props) => {



  return (
    <StoreContext.Consumer>
      {
        (store) => {
          let state = store.getState();

          let addPost = () => {
            store.dispatch(addPostActionCreator());
          }

          let onPostChange = (text) => {
            let action = updateNewPostTextActionCreator(text)
            store.dispatch(action);
          }
          return (
            <MyPosts 
              updateNewPostText={onPostChange}
              addPost={addPost}
              newPostText={state.profilePage.newPostText}
              posts={state.profilePage.posts}
            />
          )
        }
      }
    </StoreContext.Consumer>
  );
};

export default MyPostsContainer;

